/*
문제 풀어 보세요 ^^
요구사항
 >> 매장카트 구현하기 입니다 <<
카트 (Cart) >> member field로 만드세요
카트 매장에 있는 [모든 전자제품]을 담을 수 있다 
카트의 크기는 고정되어 있다 (10개) : 1개  , 2개 담을 수 있고 최대 10개까지 담을 수 있다
고객이 물건을 구매 하면 ... [카트에 담는다]
---------------------------------------
계산대에 가면 전체 계산
계산기능이 필요
summary() 기능 추가해 주세요
당신이 구매한 물건이름 과 가격정보 나열
총 누적금액 계산 출력

hint) 카트 물건을 담는 행위 (Buy() 함수안에서 cart  담는 것을 구현 )
hint) Buyer ..>> summary()  main 함수에서 계산할때  사용합니다

Buyer >> buy() , summary() >> 카트에 물건 계산 (어떤 물건, 각 가격 >> 당신은 총 얼마를 내야하나?)

구매자는 default 금액을 가지고 있고 초기금액을 설정할 수 도 있다

*/

class Product2 { // extends Object
	int price;
	int bonuspoint;

	// Product() { }
	Product2(int price) {
		this.price = price;
		this.bonuspoint = (int) (this.price / 10.0);
	}

}

class KtTv2 extends Product2 {
	KtTv2() {
		super(500);
	}

	// Object 재정의
	@Override
	public String toString() {
		return "KtTv2";
	}
}

class Audio2 extends Product2 {
	Audio2() {
		super(100);
	}

	@Override
	public String toString() {
		return "Audio2";
	}
}

class NoteBook2 extends Product2 {
	NoteBook2() {
		super(150);
	}

	@Override
	public String toString() {
		return "NoteBook2";
	}
}

//구매자
class Buyer2 {
	int money;
	int bonuspoint;
	Product2[] products = new Product2[10];

	public Buyer2() {
		this(5000);
	}

	public Buyer2(int money) {
		this.money = money;
		this.bonuspoint = 0;
	}

	void Buy(Product2 n) {
		if (products[products.length - 1] != null) {
			System.out.println("장바구니가 가득찼습니다");
			return;
		}

		if (this.money < n.price) {
			System.out.println("고객님 잔액이 부족합니다^^ " + this.money);
			return; // 함수의 종료(강제)
		}

		for (int i = 0; i < products.length; i++) {
			if (products[i] == null) {
				products[i] = n;
				break;
			}
		}

		/*
		 * this.money -= n.price; //실 구매행위 this.bonuspoint += n.bonuspoint;
		 * System.out.println("현재 잔액은 : " + this.money );
		 * System.out.println("구매한 물건은 : " + n.toString());
		 */
	}

	void Summary() {
		int sumPrice = 0;
		for (int i = 0; i < products.length; i++) {
			if (products[0] == null) {
				System.out.println("카트에 담긴 상품이 없습니다");
				return;
			}
			if (products[i] == null) {
				break;
			}
			sumPrice += products[i].price;
		}
		System.out.println("카트에 담긴 상품 가격의 총합은 [" + sumPrice + "원]입니다");
		int sumPoint = 0;
		for (int i = 0; i < products.length; i++) {
			if (products[i] == null) {
				break;
			}
			sumPoint += products[i].bonuspoint;
		}
		System.out.println("받게되는 포인트점수는 [" + sumPoint + "점]입니다");
		String pList = "";
		for (int i = 0; i < products.length; i++) {
			if (products[i] == null) {
				break;
			}
			pList += products[i].toString() + " ";
		}
		System.out.println("카트에 담긴 제품목록 :");
		System.out.println(pList);

	}
}

public class Ex13_Inherit_KeyPoint {

	public static void main(String[] args) {
		KtTv2 tv2 = new KtTv2();
		Audio2 audio2 = new Audio2();
		NoteBook2 notebook2 = new NoteBook2();
		Buyer2 buyer2 = new Buyer2();
		System.out.println(buyer2.money);
//      System.out.println(buyer2.products[5]);
		buyer2.Buy(notebook2);
		buyer2.Buy(notebook2);
		buyer2.Buy(notebook2);
		buyer2.Buy(tv2);
		buyer2.Buy(tv2);
		buyer2.Buy(audio2);
		buyer2.Buy(audio2);
		buyer2.Summary();

	}

}